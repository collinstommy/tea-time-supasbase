// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (spotify_id, user_id, artists, name, track_count)
VALUES ($1, $2, $3, $4, $5) RETURNING playlist_id, spotify_id, user_id, artists, name, track_count
`

type CreatePlaylistParams struct {
	SpotifyID  string
	UserID     pgtype.UUID
	Artists    string
	Name       string
	TrackCount int
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRow(ctx, createPlaylist,
		arg.SpotifyID,
		arg.UserID,
		arg.Artists,
		arg.Name,
		arg.TrackCount,
	)
	var i Playlist
	err := row.Scan(
		&i.PlaylistID,
		&i.SpotifyID,
		&i.UserID,
		&i.Artists,
		&i.Name,
		&i.TrackCount,
	)
	return i, err
}

const listPlaylists = `-- name: ListPlaylists :many
SELECT playlist_id, spotify_id, user_id, artists, name, track_count FROM playlists
`

func (q *Queries) ListPlaylists(ctx context.Context) ([]Playlist, error) {
	rows, err := q.db.Query(ctx, listPlaylists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Playlist
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.PlaylistID,
			&i.SpotifyID,
			&i.UserID,
			&i.Artists,
			&i.Name,
			&i.TrackCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
